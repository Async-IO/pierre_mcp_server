name: Rust

on:
  push:
    branches: [ "main", "debug/*", "feature/*" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: false
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true

    - name: Clean previous artifacts
      run: |
        cargo clean
        rm -rf ~/.cargo/registry/cache/
        rm -rf ~/.cargo/git/db/
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@1.87.0
      with:
        components: rustfmt, clippy

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Lint with Clippy (Zero Tolerance)
      run: cargo clippy --all-targets --all-features --quiet -- -W clippy::all -W clippy::pedantic -W clippy::nursery -D warnings

    - name: Code Quality Validation (TOML-based)
      run: |
        echo "üîç Running TOML-based code quality validation..."

        # Install ripgrep if not available
        if ! command -v rg &> /dev/null; then
          echo "üì¶ Installing ripgrep..."
          sudo apt-get update && sudo apt-get install -y ripgrep
        fi

        python3 scripts/parse-validation-patterns.py scripts/validation-patterns.toml > /tmp/patterns.env
        source /tmp/patterns.env

        # Check for critical placeholder patterns
        CRITICAL_COUNT=$(rg "$CRITICAL_PATTERNS" src/ --count 2>/dev/null | awk -F: '{sum+=$2} END {print sum+0}')

        # Calculate warning count excluding documented long functions
        TOTAL_WARNING_COUNT=$(rg "$WARNING_PATTERNS" src/ --count 2>/dev/null | awk -F: '{sum+=$2} END {print sum+0}')
        DOCUMENTED_LONG_FUNCTIONS=$(rg -B2 "#\[allow\(clippy::too_many_lines\)\]" src/ | rg "// Long function:|// Safe:" --count 2>/dev/null || echo "0")
        WARNING_COUNT=$((TOTAL_WARNING_COUNT - DOCUMENTED_LONG_FUNCTIONS))

        echo "üìä Validation Results:"
        echo "  Critical patterns: $CRITICAL_COUNT"
        echo "  Total warning patterns: $TOTAL_WARNING_COUNT"
        echo "  Documented long functions: $DOCUMENTED_LONG_FUNCTIONS"
        echo "  Actual warnings: $WARNING_COUNT"

        if [ "$CRITICAL_COUNT" -gt 0 ]; then
          echo "‚ùå Critical placeholder patterns found:"
          rg "$CRITICAL_PATTERNS" src/ -n | head -10
          echo ""
          echo "These patterns indicate incomplete implementations that must be fixed."
          exit 1
        fi

        if [ "$WARNING_COUNT" -gt 0 ]; then
          echo "‚ö†Ô∏è  Warning patterns found:"
          rg "$WARNING_PATTERNS" src/ -n | head -5
          echo ""
          echo "Consider reviewing these patterns for code quality improvements."
        fi

        echo "‚úÖ Code quality validation passed!"

    - name: Build (optimized for space)
      run: cargo build --verbose --release
      env:
        CARGO_INCREMENTAL: 0
    
    - name: Run tests with coverage (limited concurrency)
      run: cargo llvm-cov --all-targets --lcov --output-path lcov.info -- --test-threads=1
      env:
        DATABASE_URL: "sqlite::memory:"
        ENCRYPTION_KEY: "rEFe91l6lqLahoyl9OSzum9dKa40VvV5RYj8bHGNTeo="
        PIERRE_MASTER_ENCRYPTION_KEY: "rEFe91l6lqLahoyl9OSzum9dKa40VvV5RYj8bHGNTeo="
        STRAVA_CLIENT_ID: "test_client_id_ci"
        STRAVA_CLIENT_SECRET: "test_client_secret_ci"
        STRAVA_REDIRECT_URI: "http://localhost:8080/auth/strava/callback"
        CARGO_INCREMENTAL: 0
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: lcov.info
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
        verbose: true
